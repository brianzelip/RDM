source('~/Documents/work/R workshop/workshop_scripts.R', echo=TRUE)
library(ggplot2)
data(diamonds)
head(diamonds)
p <- ggplot(diamonds, aes(x=clarity, fill=cut))
p + geom_bar()
p <- ggplot(diamonds, aes(cut))
p + geom_histogram()
summary(diamonds)
p <- ggplot(diamonds, aes(cut))
p + geom_bar
p + geom_bar()
p <- ggplot(diamonds, aes(color))
p + geom_bar()
reorder_size <- function(x) {
factor(x, levels = names(sort(table(x))))
}
ggplot(diamonds, aes(reorder_size(color))) + geom_bar()
reorder_size <- function(x) {
factor(x, levels = names(sort(table(x))))
}
ggplot(diamonds, aes(reorder_size(color))) + geom_bar() + opts(title = "my title")
reorder_size <- function(x) {
factor(x, levels = names(sort(table(x))))
}
ggplot(diamonds, aes(reorder_size(color))) + geom_bar() + ggtitle("my title")
ggplot(diamonds, aes(reorder_size(color))) + geom_bar() + labs(title="Diamonds color count filled by cut count")
p <- ggplot(diamonds, aes(cut))
p + geom_histogram() + labs(title="Diamonds color count filled by cut count")
p <- ggplot(diamonds, aes(x=clarity, fill=cut))
p + geom_bar() + labs(title="Diamonds color count filled by cut count")
p + geom_bar() + labs(title="Counts of diamond clarities filled by cut count")
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_smooth(se=FALSE)
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_smooth(se=FALSE) + labs(title="Smoothing trends of diamond carat prices by clarity of diamond")
help("diamonds")
data("mtcars")
head(mtcars)
help(mtcars)
mtcars$mpg
cor.test(mtcars$mpg, mtcars$wt)
head(mtcars)
mtcars$mpg
mtcars$wt
cor.test(mtcars$mpg, mtcars$wt)
summary(mtcars)
mtcars$mpg
mtcars$wt
cor.test(mtcars$mpg, mtcars$wt)
fit = lm(mpg ~ wt, mtcars)
sumary(fit)
summary(fit)
fit = lm(mpg ~ wt, mtcars)
fit = lm(mpg ~ wt, mtcars)
summary(fit)
3 +5
3 + 5
10 * 10
#
# Basic arithmatic
#
3 + 5        # addition
20 - 5       # subtraction
10 * 10      # multiplication
3 / 4        # division
18 %/% 12    # just the integer part of the quotient
18 %% 12     # just the remainder part (modulo)
10 ^ 2       # exponentiation
log(10)      # natural log (base e)
exp(2.302585)# antilog, e raised to a power
log10(100)   # base 10 logs; log(100, base=10) is the same
sqrt(100)    # square root
#
# Basic arithmatic
#
3 + 5        # addition
20 - 5       # subtraction
10 * 10      # multiplication
3 / 4        # division
18 %/% 12    # just the integer part of the quotient
18 %% 12     # just the remainder part (modulo)
10 ^ 2       # exponentiation
log(10)      # natural log (base e)
exp(2.302585)# antilog, e raised to a power
log10(100)   # base 10 logs; log(100, base=10) is the same
sqrt(100)    # square root
#
# Basic arithmetic
#
3 + 5        # addition
20 - 5       # subtraction
10 * 10      # multiplication
3 / 4        # division
18 %/% 12    # just the integer part of the quotient
18 %% 12     # just the remainder part (modulo)
10 ^ 2       # exponentiation
log(10)      # natural log (base e)
exp(2.302585)# antilog, e raised to a power
log10(100)   # base 10 logs; log(100, base=10) is the same
sqrt(100)    # square root
variable <- 5
variable
x <- 5
y <- 6
y - x
sqrt(x)
sqrt(y)
y <- 9
sqrt(y)
help("diamonds")
help(mtcars)                  # Show the description of the mtcars dataset
example("knit")
example("ggplot")
data <- read.table(file = "./Documents/work/RDM/_data/AAHSL_members_test.tsv", header = T)
data <- read.table(file = "./Documents/work/RDM/_data/AAHSL_members.tsv", header = T)
data <- read.table(file = "./Documents/work/RDM/_data/AAHSL_members_test.tsv", header = T)
data <- read.table("./Documents/work/RDM/_data/AAHSL_members_test.tsv", header = T)
data <- read.csv("./Documents/work/RDM/_data/code_categories.csv", header = T)
summary(data)
library()
library(ggplot2)
AAHSLdata <- read.csv("code_categories.csv", header = T)
# check to see the factor levels that R creates from data
AAHSLdata$Code
setwd("Documents/work/RDM/_data/")
AAHSLdata <- read.csv("code_categories.csv", header = T)
# check to see the factor levels that R creates from data
AAHSLdata$Code
levels(AAHSLdata$Code)[1]
# reorder the factor levels to be displayed in the way that I want,
# which is Level 1, Level 2, Level 3, Level 0
AAHSLdata$Code <- factor(AAHSLdata$Code, levels = c("Education", "Consultation", "Infrastructure", "None found"))
# check to make sure the reorder happened as expected
print(levels(AAHSLdata$Code))
AAHSLdata$Code
# The main output now that I have reordered and rendered my plot
# in the way that I want it.
# set up the bar graph:
#  - X axis - each level
#  - Y axis - count of libraries per level
#  - print the count in text above each bar
#  - adjust X axis text so that the labels are readable on small viewports
AAHSLplot <- ggplot(AAHSLdata, aes(x=Code)) + geom_bar(fill="#0074d9") + stat_count(geom="text", size=6, colour="white", aes(label=..count.., vjust=1.5)) + labs(x = "Levels", y = "Libraries") + theme_bw(base_size = 16) + theme(axis.text.x=element_text(angle=45, hjust = 1))
# generate the plot
AAHSLplot
# output the plot to SVG in the `img` directory for web publishing
ggsave(file="../img/verticalOutput.svg", plot=AAHSLplot, width=5, height=5)
